#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

TOOL=""
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m' # No Color
CURL="curl -s -L --retry 15 --retry-delay 2" # retry for up to 30 seconds

handleDefaultPkgSpec() {
    if [ "$pkgs" = "default" ];
    then
        warn "Installing package '.' (default)"
        pkgs="."
    fi
}

massagePkgSpecForVendor() {
    local t=""
    for pkg in $(echo $pkgs); do
      if [ "${pkg:0:1}" = "." ] || [ ! -d "./vendor/$pkg" ]; then
        t+="${pkg} "
      else
        t+="${name}/vendor/${pkg} "
      fi
    done
    pkgs="${t}"
}



extract_deps() {
	
	###############################################
	# Setup build environment
	###############################################
	echo "*********************************************"
	echo "Gopath is $GOPATH"
	tar xf $buildpack/lib/hyperledger.tar -C $GOPATH/src 
	echo "*********************************************"

	###############################################

}

setup_luna() {
	###############################################
	# Setup luna
	###############################################
	
	
	
	buildpack_bin=$buildpack/bin

	echo "*********************************************"
	echo "Setup Luna"
	echo "Build folder : $build"
	echo "Cache folder : $cache"
	echo "Home: $HOME"
	echo "*********************************************"

	# Extract luna libs
	luna_libs_folder=$buildpack/lib
	echo "Creating luna lib folder"
	mkdir -p $luna_libs_folder
	echo "Extracting luna libs"
	tar xvf $buildpack/lib/luna_security_provider_lib.tar -C $luna_libs_folder
	echo "*********************************************"
	echo $TEST_VAR
	echo "*********************************************"
	echo "Create certificate here..."

	echo "*********************************************"
	echo Check IP
	ip addr
	echo "*********************************************"
	echo "$(cat /tmp/buildpack-release-step.yml)"
	echo "*********************************************"

}

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    ver=$1
    file=$2
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        echo https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/go/$file
        ;;
    *)
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

DEFAULT_GO_VERSION="go1.6"

# Expand to supported versions of Go, (e.g. expand "go1.5" to latest release go1.5.2)
# All specific or other versions, take as is.
expand_ver() {
  buildpack_dir=$1
  target_version=$2
  highest_ver="$($buildpack_dir/compile-extensions/bin/highest_version $buildpack_dir/manifest.yml go $target_version)"

  if [ "$highest_ver" = "" ]; then
    echo $target_version
  else
    echo $highest_ver
  fi
}

# Report deprecated versions to user
# Use after expand_ver
report_ver() {
  : # unsupported versions in Cloud Foundry will fail to push; no deprecation warnings needed
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$3
buildpack=$(cd "$(dirname $0)/.." && pwd)

arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip

python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH
steptxt="----->"

# CF Common
BUILDPACK_PATH=$buildpack
export BUILDPACK_PATH
source $buildpack/compile-extensions/lib/common
export PYTHONHOME=$BUILDPACK_PATH/builds/runtimes/python-2.7.6
export PATH=$PYTHONHOME/bin:$PATH
$BUILDPACK_PATH/compile-extensions/bin/check_stack_support
$BUILDPACK_PATH/compile-extensions/bin/download_dependency godep /tmp
tar -xzf /tmp/godep -C /tmp
PATH=/tmp/bin:$PATH
# END CF Common

virtualenv() {
    python "$buildpack/vendor/virtualenv-1.11.6/virtualenv.py" "$@"
}

warn() {
    echo -e "${YELLOW} !!    $@${NC}"
}

err() {
    echo -e >&2 "${RED} !!    $@${NC}"
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

# allow apps to specify cgo flags and set up /app symlink so things like CGO_CFLAGS=-I/app/... work
if [ ! -z "$env_dir" ]
then
    mkdir -p "$env_dir"
    env_dir=$(cd "$env_dir/" && pwd)
  for key in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS GO_LINKER_SYMBOL GO_LINKER_VALUE GO15VENDOREXPERIMENT GOVERSION
    do
        if [ -f "$env_dir/$key" ]
        then
            export "$key=$(cat "$env_dir/$key")"
        fi
    done
fi

if test -f "$build/Godeps/Godeps.json"
then
    TOOL="godep"
    step "Checking Godeps/Godeps.json file."
    if ! jq -r . < "$build/Godeps/Godeps.json" > /dev/null
    then
        err "Bad Godeps/Godeps.json file"
        exit 1
    fi
    name=$(<$build/Godeps/Godeps.json jq -r .ImportPath)
    ver=$(<$build/Godeps/Godeps.json jq -r .GoVersion)
    TOOL="godep"
elif test -f $build/.godir
then
    warn "Deprecated, .godir file found! Please update to supported Godeps dependency manager."
    warn "See https://github.com/tools/godep for usage information."
    exit 1
elif (test -d "$build/src" && test -n "$(find "$build/src" -type f -name '*.go' | sed 1q)")
then
    TOOL="gb"
    ver=${GOVERSION:-$DEFAULT_GO_VERSION}
else
    TOOL="go_nativevendoring"
    ver=${GOVERSION:-$DEFAULT_GO_VERSION}
    if [ -z $GOPACKAGENAME ]
    then
        err 'To use go native vendoring set the $GOPACKAGENAME'
        err "environment variable to your app's package name"
        exit 1
    fi
    name=$GOPACKAGENAME
fi

ver=$(expand_ver $buildpack $ver)

file=${GOFILE:-$ver.linux-amd64.tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

if test -e $build/bin && ! test -d $build/bin
then
    err ""
    err "File bin exists and is not a directory."
    err ""
    exit 1
fi

report_ver $ver

if test -d $cache/$ver/go
then
    step "Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    cd $cache/$ver
        exit_code=0
        url=$(translate_dependency_url $ver) || exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo -e "`$buildpack/compile-extensions/bin/recommend_dependency $ver`" 1>&2
          exit 22
        fi

    start "Installing $ver"
        $CURL $url | tar zxf -
    finished
    echo "Downloaded [$url]"
    cd - >/dev/null
fi

mkdir -p $build/bin
GOROOT=$cache/$ver/go export GOROOT

# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
FLAGS=(-tags cloudfoundry)
if [ -n "$GO_LINKER_SYMBOL" -a -n "$GO_LINKER_VALUE" ]
then
    case $ver in
    go1.5*|go1.6*)
        xval="$GO_LINKER_SYMBOL=$GO_LINKER_VALUE"
        ;;
    *)
        xval="$GO_LINKER_SYMBOL $GO_LINKER_VALUE"
        ;;
    esac
    FLAGS+=(-ldflags "-X $xval")
fi

echo "Debug.............................1"
GO15VENDOREXPERIMENT=1

case $TOOL in
    godep)
        GOBIN=$build/bin export GOBIN
        GOPATH=$build/.heroku/go export GOPATH
        PATH=$GOROOT/bin:$PATH

        p=$GOPATH/src/$name
        mkdir -p $p
        cp -R $build/* $p

        pkgs=$(<$build/Godeps/Godeps.json jq -r 'if .Packages then .Packages | join(" ") else "default" end')
        handleDefaultPkgSpec

        case $ver in
        go1.5*)
			echo "Debug......................go1.5"
            if test "$GO15VENDOREXPERIMENT" = "1"
            then
                warn ""
                warn "\$GO15VENDOREXPERIMENT=1. This is an experiment. Things may not work as expected."
                warn "See https://devcenter.heroku.com/articles/go-support#go-1-5-vendor-experiment for more info."
                warn ""
               VendorExperiment="true"
            fi
        ;;
        go1.6*)
			echo "Debug......................go1.6"
            if test "$GO15VENDOREXPERIMENT" = "0"
            then
                VendorExperiment="false"
            else
                VendorExperiment="true"
            fi
            FLAGS+=(--buildmode=pie)
        ;;
        *)
			echo "Debug......................etc"
            VendorExperiment="false"
        ;;
        esac
		
		echo "Debug.............................2"

        unset GIT_DIR # unset git dir or it will mess with goinstall
        cd $p
        if test "$VendorExperiment" = "true"
        then
            if test ! -d "$build/vendor"
            then
              warn ""
              warn "vendor/ directory does not exist."
              warn ""
            fi
            massagePkgSpecForVendor
									
            step "Running: go install -v ${FLAGS[@]} ${pkgs}"
            go install -v "${FLAGS[@]}" ${pkgs} 2>&1
        else
            step "Running: godep go install -v ${FLAGS[@]} ${pkgs}"
            godep go install -v "${FLAGS[@]}" ${pkgs} 2>&1
        fi
    ;;
    go_nativevendoring)
		echo "Debug......................go_nativevendoring"
	
        GOBIN=$build/bin export GOBIN
        GOPATH=$build/.heroku/go export GOPATH
        PATH=$GOROOT/bin:$PATH

        p=$GOPATH/src/$name
        mkdir -p $p
        cp -R $build/* $p
		
		#Added
		
		extract_deps

        pkgs="."

        case $ver in
        go1.5*)
			echo "Debug......................go_1.5"
		
            if ! test "$GO15VENDOREXPERIMENT" = "1"
            then
                warn ""
                warn "\$GO15VENDOREXPERIMENT is not =1. To use vendor your packages in vendor/"
                warn "for go 1.5 this environment variable must be set to 1."
                warn ""
				
				echo "Debug...................exit"
				
                exit 1
            fi
        ;;
        go1.6*)
			echo "Debug......................go_1.6"
		
            if test "$GO15VENDOREXPERIMENT" = "0"
				echo "Debug..........................GO15VENDOREXPERIMENT is 0"
            then
                warn ""
                warn "\$GO15VENDOREXPERIMENT=0. To use vendor your packages in vendor/"
                warn "for go 1.6 this environment variable must unset or set to 1."
                warn ""
				echo "Debug...................exit"
                exit 1
            fi
        ;;
        esac

		echo "Debug......................calling go install"
		
        unset GIT_DIR # unset git dir or it will mess with goinstall
        cd $p
        step "Running: go install -v ${FLAGS[@]} ${pkgs}"
		pwd
        go install -v "${FLAGS[@]}" ${pkgs} 2>&1
    ;;
# GB installation currently unsupported
    gb)
		echo "Debug......................gb"
	
        warn ""
        warn "Error: Cloud Foundry does not support the GB package manager"
        warn "We currently only support the 'Godep' package manager for go apps"
        warn "For support please file an issue: https://github.com/cloudfoundry/go-buildpack/issues"
        warn ""
        exit 1
    ;;
esac




#if [ -f $(basename $name) ]
#then
#	echo -e "---\ndefault_process_types:\n  web: $(basename $name)" > /tmp/buildpack-release-step.yml
#else
#	echo "$(basename $name) not found."
#	echo "Let us try to rebuild..."
#	echo "Inside bin folder"
#	ls -l bin/
	
#	go build -o bin/$(basename $name)
#	ls -l 
#	ls -l bin/
#	echo -e "---\ndefault_process_types:\n  web: $(basename $name)" > /tmp/buildpack-release-step.yml
#fi


echo -e "---\ndefault_process_types:\n  web: sh run_service" > /tmp/buildpack-release-step.yml

#added
setup_luna


###############################################


# Cleanup from original buildpack
###############################################
rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
cp $buildpack/vendor/concurrency.sh $build/.profile.d/







